name: API Deployment

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: List directory structure
      run: |
        echo "Current directory: $(pwd)"
        echo "Directory contents:"
        ls -la
        echo "Searching for api directories:"
        find . -type d -name "api" -o -name "API" | sort
        echo "Searching for package.json files:"
        find . -name "package.json" | sort
    
    - name: Find API directory
      id: find-api
      run: |
        API_DIR=$(find . -type d -name "api" -o -name "API" | sort | head -n 1)
        if [ -z "$API_DIR" ]; then
          echo "Aucun répertoire api ou API trouvé"
          exit 1
        fi
        echo "API_DIR=$API_DIR" >> $GITHUB_OUTPUT
        echo "Utilisation du répertoire: $API_DIR"
    
    - name: Create Dockerfile for API
      run: |
        API_DIR="${{ steps.find-api.outputs.API_DIR }}"
        
        # Créer un Dockerfile pour l'API
        cat > $API_DIR/Dockerfile << 'EOF'
        FROM node:20-alpine

        WORKDIR /app

        # Copier package.json et installer les dépendances
        COPY package*.json ./
        RUN npm install

        # Copier le reste des fichiers
        COPY . .

        # Ajouter des logs explicites
        RUN echo "console.log('Démarrage de l\'API Torres...');" >> index.js
        RUN echo "console.log('Environnement: ' + process.env.NODE_ENV);" >> index.js
        RUN echo "console.log('Port d\'écoute: ' + (process.env.PORT || 3001));" >> index.js

        # Exposer le port
        EXPOSE 3001

        # Commande de démarrage
        CMD ["node", "index.js"]
        EOF
        
        echo "Dockerfile créé:"
        cat $API_DIR/Dockerfile
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
    
    - name: Build and push API image
      uses: docker/build-push-action@v4
      with:
        context: ${{ steps.find-api.outputs.API_DIR }}
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/torres-api:latest
    
    - name: Verify secrets
      run: |
        echo "Vérification des secrets..."
        if [ -z "${{ secrets.HOST }}" ]; then
          echo "❌ Le secret HOST n'est pas défini"
          exit 1
        else
          echo "✅ Le secret HOST est défini"
        fi
        
        if [ -z "${{ secrets.USERNAME }}" ]; then
          echo "❌ Le secret USERNAME n'est pas défini"
          exit 1
        else
          echo "✅ Le secret USERNAME est défini"
        fi
        
        if [ -z "${{ secrets.PASSWORD }}" ]; then
          echo "❌ Le secret PASSWORD n'est pas défini"
          exit 1
        else
          echo "✅ Le secret PASSWORD est défini"
        fi
        
        if [ -z "${{ secrets.PORT }}" ]; then
          echo "❌ Le secret PORT n'est pas défini"
          exit 1
        else
          echo "✅ Le secret PORT est défini"
        fi
        
        if [ -z "${{ secrets.DOCKERHUB_USERNAME }}" ]; then
          echo "❌ Le secret DOCKERHUB_USERNAME n'est pas défini"
          exit 1
        else
          echo "✅ Le secret DOCKERHUB_USERNAME est défini"
        fi
        
        if [ -z "${{ secrets.DOCKERHUB_PASSWORD }}" ]; then
          echo "❌ Le secret DOCKERHUB_PASSWORD n'est pas défini"
          exit 1
        else
          echo "✅ Le secret DOCKERHUB_PASSWORD est défini"
        fi
        
        echo "Tous les secrets nécessaires sont définis"
  
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Test SSH connection
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        port: ${{ secrets.PORT }}
        timeout: 60s
        command_timeout: 60s
        script: |
          echo "SSH connection successful"
          echo "Current directory: $(pwd)"
          echo "Server information: $(uname -a)"
          echo "Docker version: $(docker --version || echo 'Docker non installé')"
    
    - name: Deploy API container
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        port: ${{ secrets.PORT }}
        timeout: 180s
        command_timeout: 180s
        script: |
          echo "Déploiement du conteneur API..."
          
          # Créer un fichier .env pour l'API
          mkdir -p ~/docker-deploy
          cat > ~/docker-deploy/api.env << 'EOF'
          DB_SERVER=159.203.139.99,1433
          DB_USER=sa
          DB_PASSWORD=azertyuiop1234!
          DB_DATABASE=TP_CSID
          PORT=3001
          EOF
          
          # Arrêter et supprimer le conteneur existant s'il existe
          echo "Arrêt du conteneur existant..."
          docker stop torres-api 2>/dev/null || true
          docker rm torres-api 2>/dev/null || true
          
          # Créer un réseau Docker s'il n'existe pas déjà
          docker network create torres-network 2>/dev/null || true
          
          # Télécharger la dernière image depuis Docker Hub
          echo "Téléchargement de l'image depuis Docker Hub..."
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/torres-api:latest
          
          # Démarrer le nouveau conteneur
          echo "Démarrage du nouveau conteneur..."
          docker run -d --name torres-api \
            -p 3001:3001 \
            --restart always \
            --network torres-network \
            --env-file ~/docker-deploy/api.env \
            ${{ secrets.DOCKERHUB_USERNAME }}/torres-api:latest
          
          # Attendre quelques secondes pour que le conteneur démarre
          echo "Attente de 10 secondes pour le démarrage du conteneur..."
          sleep 10
          
          # Vérifier que le conteneur est en cours d'exécution
          echo "Vérification du conteneur:"
          docker ps -a | grep torres-api
          
          # Vérification des logs du conteneur avec différentes options
          echo "Logs du conteneur API (tail):"
          docker logs --tail 50 torres-api
          
          # Vérifier si le conteneur est réellement en cours d'exécution
          CONTAINER_RUNNING=$(docker inspect -f '{{.State.Running}}' torres-api)
          if [ "$CONTAINER_RUNNING" = "true" ]; then
            echo "✅ Le conteneur API est en cours d'exécution"
          else
            echo "❌ Le conteneur API n'est PAS en cours d'exécution"
            echo "Raison de l'arrêt:"
            docker inspect -f '{{.State.Error}}' torres-api
          fi
          
          # Vérifier si le port est correctement exposé
          echo "Vérification des ports exposés:"
          docker port torres-api || echo "Aucun port exposé"
          
          echo "Déploiement Docker de l'API terminé avec succès." 