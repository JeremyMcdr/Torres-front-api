name: API Deployment

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: List directory structure
      run: |
        echo "Current directory: $(pwd)"
        echo "Directory contents:"
        ls -la
        echo "Searching for api directories:"
        find . -type d -name "api" -o -name "API" | sort
        echo "Searching for package.json files:"
        find . -name "package.json" | sort
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
    
    - name: Find API directory
      id: find-api
      run: |
        API_DIR=$(find . -type d -name "api" -o -name "API" | sort | head -n 1)
        if [ -z "$API_DIR" ]; then
          echo "Aucun répertoire api ou API trouvé"
          exit 1
        fi
        echo "API_DIR=$API_DIR" >> $GITHUB_OUTPUT
        echo "Utilisation du répertoire: $API_DIR"
    
    - name: Create Dockerfile for API
      run: |
        API_DIR="${{ steps.find-api.outputs.API_DIR }}"
        
        # Créer un Dockerfile pour l'API
        cat > $API_DIR/Dockerfile << 'EOF'
        FROM node:20-alpine

        WORKDIR /app

        COPY package*.json ./
        RUN npm install

        COPY . .

        EXPOSE 3001

        CMD ["node", "index.js"]
        EOF
        
        echo "Dockerfile créé:"
        cat $API_DIR/Dockerfile
    
    - name: Verify secrets
      run: |
        echo "Vérification des secrets..."
        if [ -z "${{ secrets.HOST }}" ]; then
          echo "❌ Le secret HOST n'est pas défini"
          exit 1
        else
          echo "✅ Le secret HOST est défini"
        fi
        
        if [ -z "${{ secrets.USERNAME }}" ]; then
          echo "❌ Le secret USERNAME n'est pas défini"
          exit 1
        else
          echo "✅ Le secret USERNAME est défini"
        fi
        
        if [ -z "${{ secrets.PASSWORD }}" ]; then
          echo "❌ Le secret PASSWORD n'est pas défini"
          exit 1
        else
          echo "✅ Le secret PASSWORD est défini"
        fi
        
        if [ -z "${{ secrets.PORT }}" ]; then
          echo "❌ Le secret PORT n'est pas défini"
          exit 1
        else
          echo "✅ Le secret PORT est défini"
        fi
        
        echo "Tous les secrets nécessaires sont définis"
    
    - name: Test SSH connection
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        port: ${{ secrets.PORT }}
        timeout: 60s
        command_timeout: 60s
        script: |
          echo "SSH connection successful"
          echo "Current directory: $(pwd)"
          echo "Server information: $(uname -a)"
          echo "Docker version: $(docker --version || echo 'Docker non installé')"
    
    - name: Create deployment directory on server
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        port: ${{ secrets.PORT }}
        timeout: 60s
        command_timeout: 60s
        script: |
          echo "Création du répertoire de déploiement..."
          mkdir -p ~/docker-deploy
          echo "Répertoire créé: ~/docker-deploy"
          ls -la ~/
    
    - name: Prepare API package for deployment
      run: |
        API_DIR="${{ steps.find-api.outputs.API_DIR }}"
        
        # Créer une archive contenant le code source et le Dockerfile
        tar -czf api.tar.gz -C "$API_DIR" .
        
        echo "Archive API créée:"
        ls -la api.tar.gz
    
    - name: Transfer API files to server
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      run: |
        # Utiliser sshpass pour le transfert
        echo "Transfert des fichiers vers le serveur..."
        sshpass -p "${{ secrets.PASSWORD }}" scp -o StrictHostKeyChecking=no -P ${{ secrets.PORT }} api.tar.gz ${{ secrets.USERNAME }}@${{ secrets.HOST }}:~/docker-deploy/
        
        echo "Fichiers transférés avec succès."
    
    - name: Build and run Docker container
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        port: ${{ secrets.PORT }}
        timeout: 180s
        command_timeout: 180s
        script: |
          echo "Préparation du déploiement Docker pour l'API..."
          
          # Créer le répertoire de déploiement s'il n'existe pas
          mkdir -p ~/docker-deploy/api
          
          # Extraire l'archive
          cd ~/docker-deploy
          tar -xzf api.tar.gz -C api
          rm api.tar.gz
          
          cd api
          
          echo "Contenu du répertoire API:"
          ls -la
          
          # Vérifier que le Dockerfile existe
          if [ ! -f "Dockerfile" ]; then
            echo "Erreur: Dockerfile non trouvé"
            exit 1
          fi
          
          # Construire l'image Docker
          echo "Construction de l'image Docker..."
          docker build -t torres-api:latest .
          
          # Arrêter et supprimer le conteneur existant s'il existe
          echo "Arrêt du conteneur existant..."
          docker stop torres-api 2>/dev/null || true
          docker rm torres-api 2>/dev/null || true
          
          # Créer un réseau Docker s'il n'existe pas déjà
          docker network create torres-network 2>/dev/null || true
          
          # Démarrer le nouveau conteneur
          echo "Démarrage du nouveau conteneur..."
          docker run -d --name torres-api -p 3001:3001 --restart always --network torres-network torres-api:latest
          
          # Vérifier que le conteneur est en cours d'exécution
          echo "Vérification du conteneur:"
          docker ps | grep torres-api
          
          echo "Déploiement Docker de l'API terminé avec succès." 