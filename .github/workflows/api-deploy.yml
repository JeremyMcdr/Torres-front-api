name: Deploy API

on:
  push:
    branches: [ main ]
    paths:
      - 'API/**'
      - '.github/workflows/api-deploy.yml'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      
      - name: Build and push API Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./API
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/torres-api:latest
      
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          script: |
            # Créer un répertoire pour le projet s'il n'existe pas
            mkdir -p ~/torres-app
            
            # Télécharger l'image Docker mise à jour
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/torres-api:latest
            
            # Arrêter et supprimer le conteneur existant s'il existe
            docker stop torres-api || true
            docker rm torres-api || true
            
            # Obtenir le nom du conteneur SQL Server
            SQL_CONTAINER_NAME=$(docker ps --filter "publish=1433" --format "{{.Names}}")
            echo "Conteneur SQL Server détecté: $SQL_CONTAINER_NAME"
            
            # Obtenir l'adresse IP du conteneur SQL Server sur le réseau bridge
            SQL_CONTAINER_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $SQL_CONTAINER_NAME)
            echo "Adresse IP du conteneur SQL Server: $SQL_CONTAINER_IP"
            
            # Lancer le nouveau conteneur API sur le même réseau que SQL Server
            echo "Démarrage de l'API..."
            docker run -d --name torres-api \
              -p 3000:3000 \
              --restart always \
              --network bridge \
              -e NODE_ENV=production \
              -e DB_HOST="$SQL_CONTAINER_IP" \
              -e DB_PORT='1433' \
              -e DB_NAME='TP_CSID' \
              -e DB_USER='sa' \
              -e DB_PASSWORD='azertyuiop1234!' \
              ${{ secrets.DOCKERHUB_USERNAME }}/torres-api:latest
            
            # Nettoyer les images non utilisées
            docker image prune -f
            
            # Afficher les logs pour vérifier la connexion à la base de données
            echo "Logs de l'API (20 premières lignes) :"
            sleep 5
            docker logs torres-api --tail 20 