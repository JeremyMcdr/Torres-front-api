name: Frontend Deployment

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: List directory structure
      run: |
        echo "Current directory: $(pwd)"
        echo "Directory contents:"
        ls -la
        echo "Searching for front directories:"
        find . -type d -name "front" -o -name "FRONT" | sort
        echo "Searching for package.json files:"
        find . -name "package.json" | sort
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
    
    - name: Find frontend directory
      id: find-front
      run: |
        FRONT_DIR=$(find . -type d -name "front" -o -name "FRONT" | sort | head -n 1)
        if [ -z "$FRONT_DIR" ]; then
          echo "Aucun répertoire front ou FRONT trouvé"
          exit 1
        fi
        echo "FRONT_DIR=$FRONT_DIR" >> $GITHUB_OUTPUT
        echo "Utilisation du répertoire: $FRONT_DIR"
    
    - name: Install dependencies
      run: |
        FRONT_DIR="${{ steps.find-front.outputs.FRONT_DIR }}"
        
        if [ -f "$FRONT_DIR/package.json" ]; then
          cd "$FRONT_DIR"
          npm install
        else
          echo "Pas de package.json trouvé dans $FRONT_DIR"
          exit 1
        fi
    
    - name: Build
      env:
        CI: "false"  # Désactiver le traitement des avertissements comme erreurs
      run: |
        FRONT_DIR="${{ steps.find-front.outputs.FRONT_DIR }}"
        
        if [ -f "$FRONT_DIR/package.json" ]; then
          cd "$FRONT_DIR"
          npm run build
        else
          echo "Pas de package.json trouvé dans $FRONT_DIR"
          exit 1
        fi
    
    - name: Create Dockerfile for frontend
      run: |
        FRONT_DIR="${{ steps.find-front.outputs.FRONT_DIR }}"
        
        # Créer un Dockerfile pour le frontend
        cat > $FRONT_DIR/Dockerfile << 'EOF'
        FROM nginx:alpine

        # Copier la configuration nginx personnalisée
        COPY nginx.conf /etc/nginx/conf.d/default.conf

        # Copier les fichiers de build
        COPY build/ /usr/share/nginx/html

        EXPOSE 80

        CMD ["nginx", "-g", "daemon off;"]
        EOF
        
        # Créer la configuration nginx
        cat > $FRONT_DIR/nginx.conf << 'EOF'
        server {
            listen 80;
            server_name localhost;

            location / {
                root /usr/share/nginx/html;
                index index.html index.htm;
                try_files $uri $uri/ /index.html;
            }

            # Rediriger les requêtes API vers le backend
            location /api {
                proxy_pass http://torres-api:3001;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host $host;
                proxy_cache_bypass $http_upgrade;
            }
        }
        EOF
        
        echo "Dockerfile créé:"
        cat $FRONT_DIR/Dockerfile
        
        echo "Configuration nginx créée:"
        cat $FRONT_DIR/nginx.conf
    
    - name: Verify secrets
      run: |
        echo "Vérification des secrets..."
        if [ -z "${{ secrets.HOST }}" ]; then
          echo "❌ Le secret HOST n'est pas défini"
          exit 1
        else
          echo "✅ Le secret HOST est défini"
        fi
        
        if [ -z "${{ secrets.USERNAME }}" ]; then
          echo "❌ Le secret USERNAME n'est pas défini"
          exit 1
        else
          echo "✅ Le secret USERNAME est défini"
        fi
        
        if [ -z "${{ secrets.PASSWORD }}" ]; then
          echo "❌ Le secret PASSWORD n'est pas défini"
          exit 1
        else
          echo "✅ Le secret PASSWORD est défini"
        fi
        
        if [ -z "${{ secrets.PORT }}" ]; then
          echo "❌ Le secret PORT n'est pas défini"
          exit 1
        else
          echo "✅ Le secret PORT est défini"
        fi
        
        echo "Tous les secrets nécessaires sont définis"
    
    - name: Test SSH connection
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        port: ${{ secrets.PORT }}
        timeout: 60s
        command_timeout: 60s
        script: |
          echo "SSH connection successful"
          echo "Current directory: $(pwd)"
          echo "Server information: $(uname -a)"
          echo "Docker version: $(docker --version || echo 'Docker non installé')"
    
    - name: Prepare frontend package for deployment
      run: |
        FRONT_DIR="${{ steps.find-front.outputs.FRONT_DIR }}"
        
        # Créer une archive contenant le build, le Dockerfile et la configuration nginx
        cd $FRONT_DIR
        tar -czf ../../frontend.tar.gz build Dockerfile nginx.conf
        cd ../..
        
        echo "Archive frontend créée:"
        ls -la frontend.tar.gz
    
    - name: Transfer frontend files to server
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      run: |
        # Utiliser sshpass pour le transfert
        echo "Transfert des fichiers vers le serveur..."
        sshpass -p "${{ secrets.PASSWORD }}" scp -o StrictHostKeyChecking=no -P ${{ secrets.PORT }} frontend.tar.gz ${{ secrets.USERNAME }}@${{ secrets.HOST }}:~/docker-deploy/
        
        echo "Fichiers transférés avec succès."
    
    - name: Build and run Docker container
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        port: ${{ secrets.PORT }}
        timeout: 180s
        command_timeout: 180s
        script: |
          echo "Préparation du déploiement Docker pour le frontend..."
          
          # Créer le répertoire de déploiement s'il n'existe pas
          mkdir -p ~/docker-deploy/frontend
          
          # Extraire l'archive
          cd ~/docker-deploy
          tar -xzf frontend.tar.gz -C frontend
          rm frontend.tar.gz
          
          cd frontend
          
          echo "Contenu du répertoire frontend:"
          ls -la
          
          # Vérifier que le Dockerfile existe
          if [ ! -f "Dockerfile" ]; then
            echo "Erreur: Dockerfile non trouvé"
            exit 1
          fi
          
          # Construire l'image Docker
          echo "Construction de l'image Docker..."
          docker build -t torres-frontend:latest .
          
          # Arrêter et supprimer le conteneur existant s'il existe
          echo "Arrêt du conteneur existant..."
          docker stop torres-frontend 2>/dev/null || true
          docker rm torres-frontend 2>/dev/null || true
          
          # Créer un réseau Docker s'il n'existe pas déjà
          docker network create torres-network 2>/dev/null || true
          
          # Connecter le conteneur API au réseau s'il existe
          docker network connect torres-network torres-api 2>/dev/null || true
          
          # Démarrer le nouveau conteneur
          echo "Démarrage du nouveau conteneur..."
          docker run -d --name torres-frontend -p 3000:80 --restart always --network torres-network torres-frontend:latest
          
          # Vérifier que le conteneur est en cours d'exécution
          echo "Vérification du conteneur:"
          docker ps | grep torres-frontend
          
          echo "Déploiement Docker du frontend terminé avec succès." 