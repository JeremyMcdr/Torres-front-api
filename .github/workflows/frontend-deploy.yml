name: Frontend Deployment

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: List directory structure
      run: |
        echo "Current directory: $(pwd)"
        echo "Directory contents:"
        ls -la
        echo "Searching for front directories:"
        find . -type d -name "front" -o -name "FRONT" | sort
        echo "Searching for package.json files:"
        find . -name "package.json" | sort
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
    
    - name: Find frontend directory
      id: find-front
      run: |
        FRONT_DIR=$(find . -type d -name "front" -o -name "FRONT" | sort | head -n 1)
        if [ -z "$FRONT_DIR" ]; then
          echo "Aucun répertoire front ou FRONT trouvé"
          exit 1
        fi
        echo "FRONT_DIR=$FRONT_DIR" >> $GITHUB_OUTPUT
        echo "Utilisation du répertoire: $FRONT_DIR"
    
    - name: Install dependencies
      run: |
        FRONT_DIR="${{ steps.find-front.outputs.FRONT_DIR }}"
        
        if [ -f "$FRONT_DIR/package.json" ]; then
          cd "$FRONT_DIR"
          npm install
        else
          echo "Pas de package.json trouvé dans $FRONT_DIR"
          exit 1
        fi
    
    - name: Build
      env:
        CI: "false"  # Désactiver le traitement des avertissements comme erreurs
      run: |
        FRONT_DIR="${{ steps.find-front.outputs.FRONT_DIR }}"
        
        if [ -f "$FRONT_DIR/package.json" ]; then
          cd "$FRONT_DIR"
          npm run build
        else
          echo "Pas de package.json trouvé dans $FRONT_DIR"
          exit 1
        fi
    
    - name: Create Dockerfile for frontend
      run: |
        FRONT_DIR="${{ steps.find-front.outputs.FRONT_DIR }}"
        
        # Créer un Dockerfile pour le frontend
        cat > $FRONT_DIR/Dockerfile << 'EOF'
        FROM nginx:alpine

        # Copier la configuration nginx personnalisée
        COPY nginx.conf /etc/nginx/conf.d/default.conf

        # Copier les fichiers de build
        COPY build/ /usr/share/nginx/html

        EXPOSE 80

        CMD ["nginx", "-g", "daemon off;"]
        EOF
        
        # Créer la configuration nginx
        cat > $FRONT_DIR/nginx.conf << 'EOF'
        server {
            listen 80;
            server_name localhost;

            location / {
                root /usr/share/nginx/html;
                index index.html index.htm;
                try_files $uri $uri/ /index.html;
            }

            # Rediriger les requêtes API vers le backend en utilisant un chemin relatif
            location /api {
                # Utiliser le même hôte que celui utilisé pour accéder au frontend
                proxy_pass http://$host:3001;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host $host;
                proxy_cache_bypass $http_upgrade;
            }
        }
        EOF
        
        echo "Dockerfile créé:"
        cat $FRONT_DIR/Dockerfile
        
        echo "Configuration nginx créée:"
        cat $FRONT_DIR/nginx.conf
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
    
    - name: Build and push Frontend image
      uses: docker/build-push-action@v4
      with:
        context: ${{ steps.find-front.outputs.FRONT_DIR }}
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/torres-frontend:latest
    
    - name: Verify secrets
      run: |
        echo "Vérification des secrets..."
        if [ -z "${{ secrets.HOST }}" ]; then
          echo "❌ Le secret HOST n'est pas défini"
          exit 1
        else
          echo "✅ Le secret HOST est défini"
        fi
        
        if [ -z "${{ secrets.USERNAME }}" ]; then
          echo "❌ Le secret USERNAME n'est pas défini"
          exit 1
        else
          echo "✅ Le secret USERNAME est défini"
        fi
        
        if [ -z "${{ secrets.PASSWORD }}" ]; then
          echo "❌ Le secret PASSWORD n'est pas défini"
          exit 1
        else
          echo "✅ Le secret PASSWORD est défini"
        fi
        
        if [ -z "${{ secrets.PORT }}" ]; then
          echo "❌ Le secret PORT n'est pas défini"
          exit 1
        else
          echo "✅ Le secret PORT est défini"
        fi
        
        if [ -z "${{ secrets.DOCKERHUB_USERNAME }}" ]; then
          echo "❌ Le secret DOCKERHUB_USERNAME n'est pas défini"
          exit 1
        else
          echo "✅ Le secret DOCKERHUB_USERNAME est défini"
        fi
        
        if [ -z "${{ secrets.DOCKERHUB_PASSWORD }}" ]; then
          echo "❌ Le secret DOCKERHUB_PASSWORD n'est pas défini"
          exit 1
        else
          echo "✅ Le secret DOCKERHUB_PASSWORD est défini"
        fi
        
        echo "Tous les secrets nécessaires sont définis"
  
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Test SSH connection
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        port: ${{ secrets.PORT }}
        timeout: 60s
        command_timeout: 60s
        script: |
          echo "SSH connection successful"
          echo "Current directory: $(pwd)"
          echo "Server information: $(uname -a)"
          echo "Docker version: $(docker --version || echo 'Docker non installé')"
    
    - name: Deploy Frontend container
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        port: ${{ secrets.PORT }}
        timeout: 180s
        command_timeout: 180s
        script: |
          echo "Déploiement du conteneur Frontend..."
          
          # Arrêter et supprimer le conteneur existant s'il existe
          echo "Arrêt du conteneur existant..."
          docker stop torres-frontend 2>/dev/null || true
          docker rm torres-frontend 2>/dev/null || true
          
          # Créer un réseau Docker s'il n'existe pas déjà
          docker network create torres-network 2>/dev/null || true
          
          # Télécharger la dernière image depuis Docker Hub
          echo "Téléchargement de l'image depuis Docker Hub..."
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/torres-frontend:latest
          
          # Créer une configuration Nginx personnalisée pour fonctionner avec un nom de domaine
          echo "Création d'une configuration Nginx personnalisée..."
          mkdir -p ~/docker-deploy
          cat > ~/docker-deploy/nginx.conf << 'EOF'
          server {
              listen 80;
              server_name localhost;
          
              location / {
                  root /usr/share/nginx/html;
                  index index.html index.htm;
                  try_files $uri $uri/ /index.html;
              }
          
              # Rediriger les requêtes API vers le backend en utilisant un chemin relatif
              location /api {
                  # Utiliser l'adresse IP du serveur directement
                  proxy_pass http://159.203.139.99:3001;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_cache_bypass $http_upgrade;
              }
          }
          EOF
          
          # Démarrer le nouveau conteneur avec la configuration personnalisée
          echo "Démarrage du nouveau conteneur..."
          docker run -d --name torres-frontend \
            -p 3000:80 \
            --restart always \
            --network torres-network \
            -v ~/docker-deploy/nginx.conf:/etc/nginx/conf.d/default.conf \
            ${{ secrets.DOCKERHUB_USERNAME }}/torres-frontend:latest
          
          # Attendre quelques secondes pour que le conteneur démarre
          echo "Attente de 10 secondes pour le démarrage du conteneur..."
          sleep 10
          
          # Vérifier que le conteneur est en cours d'exécution
          echo "Vérification du conteneur:"
          docker ps -a | grep torres-frontend
          
          # Vérification des logs du conteneur
          echo "Logs du conteneur Frontend (tail):"
          docker logs --tail 50 torres-frontend
          
          # Vérifier si le conteneur est réellement en cours d'exécution
          CONTAINER_RUNNING=$(docker inspect -f '{{.State.Running}}' torres-frontend)
          if [ "$CONTAINER_RUNNING" = "true" ]; then
            echo "✅ Le conteneur Frontend est en cours d'exécution"
          else
            echo "❌ Le conteneur Frontend n'est PAS en cours d'exécution"
            echo "Raison de l'arrêt:"
            docker inspect -f '{{.State.Error}}' torres-frontend
          fi
          
          # Vérifier si le port est correctement exposé
          echo "Vérification des ports exposés:"
          docker port torres-frontend || echo "Aucun port exposé"
          
          echo "Déploiement Docker du frontend terminé avec succès." 