name: Frontend Deployment

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: List directory structure
      run: |
        echo "Current directory: $(pwd)"
        echo "Directory contents:"
        ls -la
        echo "Searching for front directories:"
        find . -type d -name "front" -o -name "FRONT" | sort
        echo "Searching for package.json files:"
        find . -name "package.json" | sort
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
    
    - name: Install dependencies
      run: |
        # Rechercher le répertoire front avec un package.json
        FRONT_DIR=$(find . -type d -name "front" -o -name "FRONT" | sort | head -n 1)
        
        if [ -z "$FRONT_DIR" ]; then
          echo "Aucun répertoire front ou FRONT trouvé"
          exit 1
        fi
        
        echo "Utilisation du répertoire: $FRONT_DIR"
        
        if [ -f "$FRONT_DIR/package.json" ]; then
          cd "$FRONT_DIR"
          npm install
        else
          echo "Pas de package.json trouvé dans $FRONT_DIR"
          exit 1
        fi
    
    - name: Build
      env:
        CI: "false"  # Désactiver le traitement des avertissements comme erreurs
      run: |
        # Rechercher le répertoire front avec un package.json
        FRONT_DIR=$(find . -type d -name "front" -o -name "FRONT" | sort | head -n 1)
        
        if [ -z "$FRONT_DIR" ]; then
          echo "Aucun répertoire front ou FRONT trouvé"
          exit 1
        fi
        
        echo "Utilisation du répertoire: $FRONT_DIR"
        
        if [ -f "$FRONT_DIR/package.json" ]; then
          cd "$FRONT_DIR"
          npm run build
        else
          echo "Pas de package.json trouvé dans $FRONT_DIR"
          exit 1
        fi
    
    - name: Verify secrets
      run: |
        echo "Vérification des secrets..."
        if [ -z "${{ secrets.HOST }}" ]; then
          echo "❌ Le secret HOST n'est pas défini"
          exit 1
        else
          echo "✅ Le secret HOST est défini"
        fi
        
        if [ -z "${{ secrets.USERNAME }}" ]; then
          echo "❌ Le secret USERNAME n'est pas défini"
          exit 1
        else
          echo "✅ Le secret USERNAME est défini"
        fi
        
        if [ -z "${{ secrets.PASSWORD }}" ]; then
          echo "❌ Le secret PASSWORD n'est pas défini"
          exit 1
        else
          echo "✅ Le secret PASSWORD est défini"
        fi
        
        if [ -z "${{ secrets.PORT }}" ]; then
          echo "❌ Le secret PORT n'est pas défini"
          exit 1
        else
          echo "✅ Le secret PORT est défini"
        fi
        
        echo "Tous les secrets nécessaires sont définis"
    
    - name: Test SSH connection
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        port: ${{ secrets.PORT }}
        timeout: 60s
        command_timeout: 60s
        script: |
          echo "SSH connection successful"
          echo "Current directory: $(pwd)"
          echo "Server information: $(uname -a)"
    
    - name: Check and install PM2 on server
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        port: ${{ secrets.PORT }}
        timeout: 120s
        command_timeout: 120s
        script: |
          echo "Vérification des commandes disponibles..."
          echo "Node.js: $(command -v node || echo 'Non installé')"
          echo "npm: $(command -v npm || echo 'Non installé')"
          echo "PM2: $(command -v pm2 || echo 'Non installé')"
          
          # Vérifier si PM2 est déjà installé
          if command -v pm2 &> /dev/null; then
            echo "PM2 est déjà installé."
            pm2 -v
            exit 0
          fi
          
          # Vérifier si npm est disponible
          if command -v npm &> /dev/null; then
            echo "npm est disponible, installation de PM2..."
            npm install -g pm2 || sudo npm install -g pm2
            exit 0
          fi
          
          echo "Installation manuelle de PM2..."
          # Créer un répertoire temporaire pour l'installation
          mkdir -p ~/pm2-install
          cd ~/pm2-install
          
          # Télécharger et installer Node.js manuellement si nécessaire
          if ! command -v node &> /dev/null; then
            echo "Téléchargement de Node.js..."
            curl -o node.tar.gz https://nodejs.org/dist/v20.11.1/node-v20.11.1-linux-x64.tar.gz
            mkdir -p ~/node
            tar -xzf node.tar.gz -C ~/node --strip-components=1
            export PATH=$PATH:~/node/bin
            echo 'export PATH=$PATH:~/node/bin' >> ~/.bashrc
          fi
          
          # Installer PM2 localement
          echo "Installation de PM2 localement..."
          export PATH=$PATH:~/node/bin
          ~/node/bin/npm install pm2 -g
          
          # Vérifier l'installation
          echo "Vérification de l'installation de PM2..."
          export PATH=$PATH:~/node_modules/.bin
          ~/node/bin/pm2 -v || echo "Échec de l'installation de PM2"
    
    - name: Create deployment directory on server
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        port: ${{ secrets.PORT }}
        timeout: 60s
        command_timeout: 60s
        script: |
          echo "Création du répertoire de déploiement..."
          mkdir -p ~/app/front/build
          echo "Répertoire créé: ~/app/front/build"
          ls -la ~/app
    
    - name: Deploy frontend build
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      run: |
        # Rechercher le répertoire front avec un package.json
        FRONT_DIR=$(find . -type d -name "front" -o -name "FRONT" | sort | head -n 1)
        BUILD_DIR="$FRONT_DIR/build"
        
        if [ ! -d "$BUILD_DIR" ]; then
          echo "Répertoire build non trouvé: $BUILD_DIR"
          exit 1
        fi
        
        echo "Répertoire build trouvé: $BUILD_DIR"
        echo "Contenu du répertoire build:"
        ls -la "$BUILD_DIR"
        
        # Créer un fichier tar pour le transfert
        tar -czf build.tar.gz -C "$BUILD_DIR" .
        
        # Utiliser sshpass pour le transfert
        echo "Transfert des fichiers vers le serveur..."
        sshpass -p "${{ secrets.PASSWORD }}" scp -o StrictHostKeyChecking=no -P ${{ secrets.PORT }} build.tar.gz ${{ secrets.USERNAME }}@${{ secrets.HOST }}:~/app/front/
        
        # Décompresser l'archive sur le serveur
        sshpass -p "${{ secrets.PASSWORD }}" ssh -o StrictHostKeyChecking=no -p ${{ secrets.PORT }} ${{ secrets.USERNAME }}@${{ secrets.HOST }} "cd ~/app/front && tar -xzf build.tar.gz -C build && rm build.tar.gz"
    
    - name: Start frontend server
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        port: ${{ secrets.PORT }}
        timeout: 60s
        command_timeout: 60s
        script: |
          cd ~/app/front
          
          echo "Contenu du répertoire front/build:"
          ls -la build
          
          # Utiliser le chemin complet vers PM2 si nécessaire
          if command -v pm2 &> /dev/null; then
            pm2 delete front 2>/dev/null || true
            pm2 serve build 3000 --name front --spa
          elif [ -f ~/node/bin/pm2 ]; then
            ~/node/bin/pm2 delete front 2>/dev/null || true
            ~/node/bin/pm2 serve build 3000 --name front --spa
          elif [ -f ~/node_modules/.bin/pm2 ]; then
            ~/node_modules/.bin/pm2 delete front 2>/dev/null || true
            ~/node_modules/.bin/pm2 serve build 3000 --name front --spa
          else
            echo "PM2 n'est pas disponible. Impossible de démarrer l'application."
            exit 1
          fi 